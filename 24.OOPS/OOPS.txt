OOPS: OOPS stands for Object oriented programming System.
Tha main purpose of OOPs is to deal with real world entity using programming language.

OOPS Feature:

1)Class
2)Object
3)Inheritance
4)Polymorphism
5)Abstraction
6)Encapulation.

3)Inheritance :When we want to use one class all properties into another class then we should go for 
inheritance.

Note:  1) In java extends keyword is used to perform inheritance.

       2) Inheritance provides code reusuability.
  
       3)we can not access private members of parent class through class.

      * 4)Method overriding only possible through inheritance.

       5)A child class contains all the properties of Parent class so create object of child class.

       6)Inheritance is also called as IS-A relationship.


Example :

package isARelationship;

public class Parent {

	public void add() {
		int a=10;
		int b=20;
		int c=a+b;
		System.out.println("Addition of a and b :"+c);
	}
	
	
}





package isARelationship;

public class Child extends Parent{

	public void sub() {
		int a=20;
		int b=10;
		int c=a-b;
		System.out.println("Sub of a And b :"+c);
	}
	public static void main(String[] args) {
		
		Parent p=new Parent();
		p.add();
	//	p.sub();
		
		Child c=new Child();
		c.add();
		c.sub();
		
		Parent p1=new Child();
		p1.add();
	//	p1.sub();
		
		//Child c=new Parent();
	}
}



HAS-A Relationship:


package hasARelationship;

public class Parent {

	
	public void add() {
		int a=10;
		int b=20;
		int c=a+b;
		System.out.println("Addition of a and b :"+c);
	}
	
	public void multiply() {
		int a=10;
		int b=20;
		int c=a*b;
		System.out.println("Multiply of a and b :"+c);
	}
}



package hasARelationship;

public class Child  {

	public void sub() {
		int a=20;
		int b=10;
		int c=a-b;
		System.out.println("Sub of a And b :"+c);
	}
	
	public static void main(String[] args) {
		
		Parent p=new Parent();
		p.add();
		
		Child c=new Child();
		c.sub();
	}
}
