Map(I):Map(I):
 Map is Not Child Interface of Collection.
 If we want to Represent a Group of Objects as Key- Value Pairs then we should go for Map.
Map Doen not follow order.
 Both Keys and Values are Objects Only. 
 Duplicate Keys are Not allowed. But Values can be Duplicated.
 Each Key- Value Pair is Called an Entry.

Methods:
=======
Map Interface Defines the following Methods
1) Object put(Object key, Object value); 
To Add One Key- Value Pair.If the specified Key is Already Available then Old Value will 
be Replaced with New Value and Returns Old Value.


Example 1:
package map;

import java.util.HashMap;
import java.util.Map;

public class MapDemo {

	public static void main(String[] args) {

		Map<Integer, String> map = new HashMap<>();

		System.out.println(map.put(1, "Narayan"));
		System.out.println(map.put(2, "Bikkad"));
		System.out.println(map.put(1, "Santosh"));

		System.out.println(map);

	}
}


2) void putAll(Map m)
3) Object get(Object key)
4) Object remove(Object key)
5) booleancontainsKey(Object key)
6) booleancontainsValue(Object value)
7) booleanisEmpty()
8) int size()
9) void clear()
10) Set keySet()
11) Collection values()
12) Set entrySet()

Example 2:

package map;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class MapIteratorDemo {

	public static void main(String[] args) {

		Map<Integer, String> map = new HashMap<>();
		map.put(111, "Santosh");
		map.put(333, "Bikkad");
		map.put(222, "Bikkad");
		map.put(444, "Aurangabad");

		System.out.println(map);
		System.out.println(map.containsKey(555));
		System.out.println(map.containsValue("Aurangabad"));
		Set<Integer> key = map.keySet();
		System.out.println(key);

		Collection<String> values = map.values();
		System.out.println(values);

		Set<Entry<Integer, String>> entrySet = map.entrySet();
		System.out.println(entrySet);

		Iterator itr = entrySet.iterator();

		while (itr.hasNext()) {
			Entry next = (Entry) itr.next();

			System.out.println(next.getKey() + " " + next.getValue());
		}

	}
}


